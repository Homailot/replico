#pragma kernel decay_finger_history

RWTexture2D<float4> finger_history;
RWStructuredBuffer<float4> finger_positions;
RWStructuredBuffer<float4> last_finger_positions;
RWStructuredBuffer<float> average_incline;

float delta_time;
float linear_decay_rate;
float quadratic_decay_rate;
float finger_radius;

float distance_to_line (float2 p, float2 a, float2 b)
{
    float2 ab = b - a;
    float2 ap = p - a;

    float h = saturate(dot(ap, ab) / dot(ab, ab));
    return length(ap - h * ab) / finger_radius;
}

float point_in_front (float2 p, float2 a, float incline)
{
    float2 b = float2(a.x + finger_radius * cos(incline), a.y + finger_radius * sin(incline));

    float2 ab = b - a;
    float2 ap = p - a;

    return (dot(ap, ab) / dot(ab, ab));
}

float2 get_finger_radius(float2 p, float2 a, float2 b, float average_incline, float decay, float previous_radius)
{
    const float finger_distance = distance_to_line(p, a, b);
    const float in_front = point_in_front(p, a, average_incline);

    const float inverse_finger_distance = saturate(1.0 - finger_distance);
    const float previous_inverse_distance = previous_radius * (1.0 - step(1.0, 1.0 - decay));

    return float2(
        lerp(
            previous_inverse_distance > 0.0 ? max(inverse_finger_distance, previous_inverse_distance) : inverse_finger_distance,
            finger_distance <= 1.0 ? inverse_finger_distance : previous_inverse_distance,
            saturate(in_front + 0.5)
        ),
        saturate(decay + 1.0 * (1.0 - step(1.0, finger_distance)))
    );
}

float calculate_decay(float decay)
{
    return decay - linear_decay_rate * delta_time - quadratic_decay_rate * delta_time * delta_time;
}

[numthreads(8,8,1)]
void decay_finger_history (uint3 id : SV_DispatchThreadID)
{
    const float finger_1_decay = calculate_decay(finger_history[id.xy].y);
    const float2 a1 = last_finger_positions[0].xy;
    const float2 b1 = finger_positions[0].xy;

    float2 finger1_radius = get_finger_radius(float2(id.xy), a1, b1, average_incline[0], finger_1_decay, finger_history[id.xy].x);

    const float finger_2_decay = calculate_decay(finger_history[id.xy].w);
    const float2 a2 = last_finger_positions[0].zw;
    const float2 b2 = finger_positions[0].zw;

    float2 finger2_radius = get_finger_radius(float2(id.xy), a2, b2, average_incline[1], finger_2_decay, finger_history[id.xy].z);
    
    finger_history[id.xy] = float4(
        finger1_radius.x,
        finger1_radius.y,
        finger2_radius.x,
        finger2_radius.y
        );
}
